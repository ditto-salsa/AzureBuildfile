Imports System
Imports System.CodeDom.Compiler
Imports System.Data
Imports System.IO
Imports System.Reflection.PortableExecutable
Imports System.Security.Authentication.ExtendedProtection
Imports Microsoft

Module CSVDefCreator
    Sub Main(args As String())

        If args.Length < 1 Then
            GoTo HelpText
        End If

        For index = 0 To args.Length - 1
            If args(index) = "help" Or args(index) = "-h" Or args(index) = "-help" Or args(index) = "--Help" Then
                GoTo HelpText
            End If
        Next

        GoTo MainCode

HelpText:
        Console.WriteLine("CSVDefCreator: Takes .csv files, returns defintion filled .defs.event file per table.")
        Console.WriteLine("It also generates _TableDefsInstaller.event, which includes all of the table def event files.")
        Console.WriteLine("Usage: CSVDefCreator.exe PathToDefinitionsFolder PathToTable1 PathToTable2 PathToTable3 ...")
        Console.WriteLine("All paths must be relative to the executable's location.")
        Console.WriteLine("Column A of the csv tables should be formatted as " & Chr(34) & "0xYY Name " & Chr(34))
        Console.WriteLine("Press any key to exit...")
        Console.ReadKey()
        Exit Sub

MainCode:

        Dim FileArray(args.Length - 1) As String
        Dim filenum As Integer = FreeFile()
        Dim CurrentFile_Bytes() As String
        Dim CurrentFile_Names() As String
        Dim CurrentFile_AllDefs() As String
        Dim CurrentLine As String = ""
        Dim CurrentFileLength As Integer = 0
        Dim NewFilePaths() As String
        Dim CommentOutLine As Boolean = False
        Dim CommentCheckingChar As String = ""
        Dim DefsPath As String = args(0)

        For index = 0 To args.Length - 1
            If index + 1 > args.Length - 1 Then
                Exit For
            End If
            FileArray(index) = args(index + 1)
        Next


        ' for each file
        For index = 0 To FileArray.Length - 2

            ' get file length
            CurrentFileLength = File.ReadAllLines(FileArray(index)).Length

            ' redimension the arrays to be of correct length
            ReDim CurrentFile_Bytes(CurrentFileLength)
            ReDim CurrentFile_Names(CurrentFileLength)
            ReDim CurrentFile_AllDefs(CurrentFileLength)

            If CurrentFileLength = 0 Then
                Exit Sub
            End If

            ' open the file
            FileOpen(filenum, FileArray(index), OpenMode.Input)

            ' for each line in the file
            For counter = 0 To CurrentFileLength - 1

                CommentOutLine = False

                ' read the line
                CurrentLine = LineInput(filenum)

                ' if there's a space at the 5th character, we know it's not A1.
                If Microsoft.VisualBasic.Mid(CurrentLine, 5, 1) = " " Then

                    ' get the byte part
                    CurrentFile_Bytes(counter) = Microsoft.VisualBasic.Left(CurrentLine, 4)

                    ' isolate the name from cell AX
                    For Chara = 1 To CurrentLine.Length

                        If Microsoft.VisualBasic.Mid(CurrentLine, Chara, 1) = "," Then

                            CurrentFile_Names(counter) = Microsoft.VisualBasic.Mid(Microsoft.VisualBasic.Left(CurrentLine, Chara - 1), 6)

                            For Sans = 1 To CurrentFile_Names(counter).Length

                                CommentCheckingChar = Microsoft.VisualBasic.Mid(CurrentFile_Names(counter), Sans, 1)

                                If CommentCheckingChar = " " Or CurrentFile_Names(counter) = "-" Or CommentCheckingChar = "<" Or CommentCheckingChar = ">" Or CommentCheckingChar = "'" Then
                                    CommentOutLine = True
                                End If
                            Next
                            Exit For
                        End If
                    Next
                End If

                If CommentOutLine Then
                    CurrentFile_AllDefs(counter) = "// #define " & CurrentFile_Names(counter) & " " & CurrentFile_Bytes(counter)
                Else
                    CurrentFile_AllDefs(counter) = "#define " & CurrentFile_Names(counter) & " " & CurrentFile_Bytes(counter)
                End If

            Next

            FileClose(filenum)

            ReDim Preserve NewFilePaths(FileArray.Length)

            NewFilePaths(index) = DefsPath & System.IO.Path.GetFileNameWithoutExtension(FileArray(index)) & ".defs.event"

            File.Create(NewFilePaths(index)).Dispose()

            FileOpen(filenum, NewFilePaths(index), OpenMode.Output)

            CurrentFile_AllDefs(0) = "// " & System.IO.Path.GetFileNameWithoutExtension(FileArray(index)) & " defs - generated by CSVDefCreator"

            For counter = 0 To CurrentFile_AllDefs.Length - 1

                PrintLine(filenum, CurrentFile_AllDefs(counter))

            Next

            FileClose(filenum)

            Console.WriteLine(Microsoft.VisualBasic.Mid(FileArray(index), (System.IO.Path.GetDirectoryName(FileArray(index)).Length + 2)) & " done")
        Next

        File.Create(DefsPath & "_TableDefsInstaller.event").Dispose()

        FileOpen(filenum, DefsPath & "_TableDefsInstaller.event", OpenMode.Output)

        PrintLine(filenum, "// Generated by CSVDefCreator")

        For index = 0 To NewFilePaths.Length - 3
            PrintLine(filenum, "#include " & Chr(34) & System.IO.Path.GetFileName(NewFilePaths(index)) & Chr(34))
        Next

        FileClose(filenum)


        Console.WriteLine("CSVDefCreator finished!")
        Console.WriteLine("Include " & Chr(34) & "_TableDefsInstaller.event" & Chr(34) & " to use these in your buildfile.")
    End Sub
End Module
